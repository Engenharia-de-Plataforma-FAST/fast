version: '3.8'

services:

  jenkins:
    image: {{ jenkins_image }}:{{ jenkins_version }}
    ports:
    - 80:8080
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 3G
    #labels:
    #  - "traefik.enable=true"
    #  - "traefik.docker.network=traefik_net"
    #  - "traefik.http.routers.jenkins.entrypoints=web"
    #  - "traefik.http.routers.jenkins.rule=Host(`jenkins.{{ project_domain }}`)"
    #  - "traefik.http.services.jenkins.loadbalancer.server.port=8080"
    volumes:
      - type: volume
        source: jenkins_home
        target: /var/jenkins_home/
    networks:
#      - traefik_net
      - cicd_net    

  sonar:
    image: {{ sonarqube_image }}:{{ sonarqube_version }}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 2G
    environment:
      - "SONARQUBE_JDBC_USERNAME={{ sonarqube_db_user }}"
      - "SONARQUBE_JDBC_PASSWORD={{ sonarqube_db_password }}"
      - "SONARQUBE_JDBC_URL=jdbc:postgresql://{{ sonarqube_db_server }}:{{ sonarqube_db_server_port }}/{{ sonarqube_db_name }}"
    volumes:
      - type: volume
        source: sonarqube_conf
        target: /opt/sonarqube/conf
      - type: volume
        source: sonarqube_data
        target: /opt/sonarqube/data
      - type: volume
        source: sonarqube_extensions
        target: /opt/sonarqube/extensions
      - type: volume
        source: sonarqube_bundled-plugins
        target: /opt/sonarqube/lib/bundled-plugins
    #labels:
    #  - "traefik.enable=true"
    #  - "traefik.docker.network=traefik_net"
    #  - "traefik.http.routers.sonar.entrypoints=web"
    #  - "traefik.http.routers.sonar.rule=Host(`sonar.{{ project_domain }}`)"
    #  - "traefik.http.services.sonar.loadbalancer.server.port=9000"
    networks:
#      - traefik_net
      - cicd_net
      - sonar_net

  sonardb:
    image: postgres:9.6
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
    environment:
      POSTGRES_USER: {{ sonarqube_db_user }}
      POSTGRES_PASSWORD: {{ sonarqube_db_password }}
    volumes:
      - type: volume
        source: sonar_postgres
        target: /var/lib/postgresql/data
    networks:
      - sonar_net

  #traefik:
  #  image: {{ traefik_image }}:{{ traefik_version }}
  #  command:
  #    - --entrypoints.web.address=:80
  #    - --providers.docker=true
  #    - --api
  #  deploy:
  #    resources:
  #      limits:
  #        memory: 512M
  #    placement:
  #      constraints:
  #        - node.role == manager
  #  labels:
  #    - "traefik.enable=true"
  #    - "traefik.http.routers.traefik.rule=Host(`{{ project_domain }}`)"
  #    - "traefik.http.routers.traefik.service=api@internal"
  #    - "traefik.http.routers.traefik.entrypoints=web"
  #    - "traefik.http.routers.traefik.middlewares=authtraefik"
  #    - "traefik.http.middlewares.authtraefik.basicauth.users={{ traefik_credential }}"
  #  ports:
  #    - "80:80"
  #    - "8080:8080"
  #  volumes:
  #    - /var/run/docker.sock:/var/run/docker.sock
  #  networks:
  #    - traefik_net

networks:
#  traefik_net:
#    name: traefik_net
  cicd_net:
    name: cicd_net
  sonar_net:
    name: sonar_net

volumes:
  jenkins_home:
    external: true
  sonarqube_conf:
    external: true
  sonarqube_data:
    external: true
  sonarqube_extensions:
    external: true
  sonarqube_bundled-plugins:
    external: true
  sonar_postgres:
    external: true
